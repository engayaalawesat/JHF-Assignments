/**
 * @param {number[]} coins
 * @param {number} amount
 * @return {number}
 */
var coinChange = function(coins, amount) {
    // Edge case: If amount is 0, no coins are needed
    if (amount === 0) return 0;

    // Initialize the queue with the starting amount and the initial count of 0 coins
    let queue = [{ amount: amount, count: 0 }];
    // Create a set to track visited amounts
    let visited = new Set();
    visited.add(amount);

    // Perform BFS
    while (queue.length > 0) {
        let { amount: currentAmount, count } = queue.shift();

        // Try each coin
        for (let coin of coins) {
            let nextAmount = currentAmount - coin;

            // If nextAmount is 0, we've found a solution
            if (nextAmount === 0) return count + 1;

            // If nextAmount is positive and not visited, add it to the queue
            if (nextAmount > 0 && !visited.has(nextAmount)) {
                queue.push({ amount: nextAmount, count: count + 1 });
                visited.add(nextAmount);
            }
        }
    }

    // If no solution is found, return -1
    return -1;
};